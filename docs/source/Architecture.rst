Architecture
=============



Overview of the Canvas Automation System
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* The project is divided into two main parts: the backend and the frontend. 
   * The backend is responsible for interacting with the Canvas API and Google Forms API to automate the grading process.  In the UML diagram below the backend is represented by Orange color. 
   * The frontend is a user interface that allows users to interact with the backend system. In the UML diagram the frontend is represented by Blue color.
   
   .. image:: _static/architecture/UML.png
      :alt: UML diagram 
      :width: 800

Backend Modules
~~~~~~~~~~~~~

* The backend is divided into the following modules:
   * `CanvasServices <CanvasServices.html>`_: module interacts with the Canvas API.
      * With in this module there is a sub-module called `CanvasServicesAPI <CanvasServices.html>`_ allows communication to the  Canvas API.
      * `test_canvas_service <CanvasServices.html#test-canvas-service>`_  is responsible for testing the CanvasServicesAPI module.
      * `schemas <CanvasServices.html#schemas>`_  defines the data schemas used by the CanvasServices module. Using this schema file it allowed us to develop efficient code with low amount of errors.
   * `GoogleServices <GoogleServices.html>`_:  interacts with the Google Forms API.
      *  `GoogleServicesAPI <GoogleServices.html>`_  interacts with the Google Forms API.
      *  `test_google_service <GoogleServices.html#test-google-service>`_  tests the GoogleServicesAPI module.
      *  `schemas <GoogleServices.html#schemas>`_  defines the data schemas used by the GoogleServices module. Using this schema file it allowed us to develop efficient code with low amount of errors. The schemas were made using Pydantic or typedict. 
   * `Logging <Logging.html>`_: logs the activities of the backend or front end system.
   
   
Frontend Modules
~~~~~~~~~~~~~

* The frontend is further divided into the following modules:
   * `GradingAutomationUI <GradingAutomationUI.html>`_: creates the UI for the grading automation system.  
      * There is a `schemas <schemas>`_ file that contains schemas used in the GradingAutomationUI.



Pipelines 
^^^^^^^^^^^


Multi-Platform Build and Release 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* This pipeline is used for creating builds for linux, windows, and mac(x86 and x64). 
* Generates this `documentation <https://kevindlopez.github.io/canvas_automation>`_ and deploys it to the github pages.
   * Location of this pipeline is in the `.github/workflows/buildApplication.yml` folder.

pylint 
~~~~~~
* This pipeline runs pylint on the code base to check for any errors. 
* As of now pylint throws errros with PyQt6. 
* location of this pipeline is in the `.github/workflows/pylint.yml` folder.


Documentation
~~~~~~~~~~~~~

* The documentation is created using Sphinx
   * The location of the documentation is in the `docs`` folder.
   * It can be build by running the command `make html` in the `docs`` folder. 
      * A pdf is generated by running `make latexpdf`. 
   * The documentation is deployed to github pages using the `.github/workflows/buildApplication.yml` pipeline.