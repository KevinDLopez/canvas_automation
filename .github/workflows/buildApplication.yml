name: Multi-Platform Build and Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  build:
    strategy:
      matrix:
        include:
          # Windows x86_64
          - os: windows-latest
            architecture: x64
            platform-name: windows-x64

          # macOS ARM64
          - os: macos-14
            architecture: arm64
            platform-name: macos-arm64

          # macOS Intel
          - os: macos-latest
            architecture: x64
            platform-name: macos-x64

          # Linux x86_64
          - os: ubuntu-latest
            architecture: x64
            platform-name: linux-x64
            artifact-extension: ""

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          architecture: ${{ matrix.architecture }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Install additional dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-glx

      - name: Create Matplotlib font cache script
        run: |
          echo "import matplotlib.pyplot" > matplotlib_font_cache.py
          echo "matplotlib.pyplot.figure()" >> matplotlib_font_cache.py
          echo "matplotlib.pyplot.close()" >> matplotlib_font_cache.py
        shell: bash

      - name: Build with PyInstaller
        run: |
          python -m PyInstaller GradingAutomation.spec --noconfirm --clean

      - name: Zip dist directory (Windows)
        if: runner.os == 'Windows'
        run: |
          cd dist
          Compress-Archive -Path * -DestinationPath ../GradingAutomation-${{ matrix.platform-name }}.zip
          cd ..
        shell: pwsh

      - name: Zip dist directory (Unix)
        if: runner.os != 'Windows'
        run: |
          cd dist
          zip -r ../GradingAutomation-${{ matrix.platform-name }}.zip *
          cd ..
        shell: bash

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: GradingAutomation-${{ matrix.platform-name }}
          path: GradingAutomation-${{ matrix.platform-name }}.zip
          if-no-files-found: error

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install sphinx sphinx-rtd-theme

      - name: Generate Documentation
        run: |
          cd docs
          make html

      - name: Upload documentation artifact
        uses: actions/upload-artifact@v3
        with:
          name: sphinx-docs
          path: docs/build/html
          if-no-files-found: error

  release:
    needs: [build, docs]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            */GradingAutomation-*.zip
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
